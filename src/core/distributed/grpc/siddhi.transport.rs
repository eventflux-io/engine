// This file is @generated by prost-build.
/// Main transport message
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransportMessage {
    /// Message identifier
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Message type
    #[prost(enumeration = "MessageType", tag = "2")]
    pub message_type: i32,
    /// Message payload (serialized data)
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// Headers as key-value pairs
    #[prost(map = "string, string", tag = "4")]
    pub headers: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Timestamp (milliseconds since epoch)
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
    /// Source node identifier
    #[prost(string, tag = "6")]
    pub source_node: ::prost::alloc::string::String,
    /// Target node identifier (empty for broadcast)
    #[prost(string, tag = "7")]
    pub target_node: ::prost::alloc::string::String,
    /// Message priority (0 = highest, 9 = lowest)
    #[prost(int32, tag = "8")]
    pub priority: i32,
    /// Compression type used for payload
    #[prost(enumeration = "CompressionType", tag = "9")]
    pub compression: i32,
}
/// Event request for streaming
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventRequest {
    /// Node identifier requesting events
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
    /// Event filter criteria
    #[prost(message, optional, tag = "2")]
    pub filter: ::core::option::Option<EventFilter>,
    /// Maximum events per batch
    #[prost(int32, tag = "3")]
    pub batch_size: i32,
}
/// Event filter criteria
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventFilter {
    /// Stream names to include (empty = all streams)
    #[prost(string, repeated, tag = "1")]
    pub stream_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Message types to include (empty = all types)
    #[prost(enumeration = "MessageType", repeated, tag = "2")]
    pub message_types: ::prost::alloc::vec::Vec<i32>,
    /// Start timestamp (milliseconds since epoch)
    #[prost(int64, tag = "3")]
    pub start_timestamp: i64,
    /// End timestamp (milliseconds since epoch, 0 = no end)
    #[prost(int64, tag = "4")]
    pub end_timestamp: i64,
}
/// Heartbeat request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatRequest {
    /// Node identifier sending heartbeat
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
    /// Current timestamp
    #[prost(int64, tag = "2")]
    pub timestamp: i64,
    /// Node status information
    #[prost(message, optional, tag = "3")]
    pub status: ::core::option::Option<NodeStatus>,
}
/// Heartbeat response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatResponse {
    /// Server timestamp
    #[prost(int64, tag = "1")]
    pub server_timestamp: i64,
    /// Server node identifier
    #[prost(string, tag = "2")]
    pub server_node_id: ::prost::alloc::string::String,
    /// Server status
    #[prost(message, optional, tag = "3")]
    pub server_status: ::core::option::Option<NodeStatus>,
    /// Cluster information
    #[prost(message, optional, tag = "4")]
    pub cluster_info: ::core::option::Option<ClusterInfo>,
}
/// Node status information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeStatus {
    /// Node health state
    #[prost(enumeration = "NodeHealth", tag = "1")]
    pub health: i32,
    /// CPU usage percentage (0-100)
    #[prost(float, tag = "2")]
    pub cpu_usage: f32,
    /// Memory usage percentage (0-100)
    #[prost(float, tag = "3")]
    pub memory_usage: f32,
    /// Active connections count
    #[prost(int32, tag = "4")]
    pub active_connections: i32,
    /// Events processed per second
    #[prost(int64, tag = "5")]
    pub events_per_second: i64,
    /// Node version
    #[prost(string, tag = "6")]
    pub version: ::prost::alloc::string::String,
    /// Additional metadata
    #[prost(map = "string, string", tag = "7")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Cluster information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterInfo {
    /// Cluster identifier
    #[prost(string, tag = "1")]
    pub cluster_id: ::prost::alloc::string::String,
    /// Total nodes in cluster
    #[prost(int32, tag = "2")]
    pub total_nodes: i32,
    /// Healthy nodes count
    #[prost(int32, tag = "3")]
    pub healthy_nodes: i32,
    /// Current leader node
    #[prost(string, tag = "4")]
    pub leader_node: ::prost::alloc::string::String,
    /// Cluster version
    #[prost(string, tag = "5")]
    pub cluster_version: ::prost::alloc::string::String,
}
/// Connection configuration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionConfig {
    /// Connection timeout in milliseconds
    #[prost(int32, tag = "1")]
    pub connection_timeout_ms: i32,
    /// Request timeout in milliseconds
    #[prost(int32, tag = "2")]
    pub request_timeout_ms: i32,
    /// Keep-alive interval in seconds
    #[prost(int32, tag = "3")]
    pub keep_alive_interval_secs: i32,
    /// Maximum message size in bytes
    #[prost(int32, tag = "4")]
    pub max_message_size: i32,
    /// Enable compression
    #[prost(bool, tag = "5")]
    pub enable_compression: bool,
    /// Preferred compression type
    #[prost(enumeration = "CompressionType", tag = "6")]
    pub preferred_compression: i32,
    /// TLS configuration
    #[prost(message, optional, tag = "7")]
    pub tls_config: ::core::option::Option<TlsConfig>,
}
/// TLS configuration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TlsConfig {
    /// Enable TLS
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    /// Certificate file path
    #[prost(string, tag = "2")]
    pub cert_file: ::prost::alloc::string::String,
    /// Private key file path
    #[prost(string, tag = "3")]
    pub key_file: ::prost::alloc::string::String,
    /// CA certificate file path
    #[prost(string, tag = "4")]
    pub ca_file: ::prost::alloc::string::String,
    /// Server name for verification
    #[prost(string, tag = "5")]
    pub server_name: ::prost::alloc::string::String,
    /// Skip certificate verification (for testing)
    #[prost(bool, tag = "6")]
    pub insecure_skip_verify: bool,
}
/// Message types
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageType {
    Unspecified = 0,
    Event = 1,
    Query = 2,
    State = 3,
    Control = 4,
    Heartbeat = 5,
    Checkpoint = 6,
    Metadata = 7,
    Acknowledgment = 8,
}
impl MessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MessageType::Unspecified => "MESSAGE_TYPE_UNSPECIFIED",
            MessageType::Event => "MESSAGE_TYPE_EVENT",
            MessageType::Query => "MESSAGE_TYPE_QUERY",
            MessageType::State => "MESSAGE_TYPE_STATE",
            MessageType::Control => "MESSAGE_TYPE_CONTROL",
            MessageType::Heartbeat => "MESSAGE_TYPE_HEARTBEAT",
            MessageType::Checkpoint => "MESSAGE_TYPE_CHECKPOINT",
            MessageType::Metadata => "MESSAGE_TYPE_METADATA",
            MessageType::Acknowledgment => "MESSAGE_TYPE_ACKNOWLEDGMENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "MESSAGE_TYPE_EVENT" => Some(Self::Event),
            "MESSAGE_TYPE_QUERY" => Some(Self::Query),
            "MESSAGE_TYPE_STATE" => Some(Self::State),
            "MESSAGE_TYPE_CONTROL" => Some(Self::Control),
            "MESSAGE_TYPE_HEARTBEAT" => Some(Self::Heartbeat),
            "MESSAGE_TYPE_CHECKPOINT" => Some(Self::Checkpoint),
            "MESSAGE_TYPE_METADATA" => Some(Self::Metadata),
            "MESSAGE_TYPE_ACKNOWLEDGMENT" => Some(Self::Acknowledgment),
            _ => None,
        }
    }
}
/// Compression types
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CompressionType {
    None = 0,
    Lz4 = 1,
    Snappy = 2,
    Zstd = 3,
}
impl CompressionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CompressionType::None => "COMPRESSION_TYPE_NONE",
            CompressionType::Lz4 => "COMPRESSION_TYPE_LZ4",
            CompressionType::Snappy => "COMPRESSION_TYPE_SNAPPY",
            CompressionType::Zstd => "COMPRESSION_TYPE_ZSTD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "COMPRESSION_TYPE_NONE" => Some(Self::None),
            "COMPRESSION_TYPE_LZ4" => Some(Self::Lz4),
            "COMPRESSION_TYPE_SNAPPY" => Some(Self::Snappy),
            "COMPRESSION_TYPE_ZSTD" => Some(Self::Zstd),
            _ => None,
        }
    }
}
/// Node health states
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NodeHealth {
    Unknown = 0,
    Healthy = 1,
    Degraded = 2,
    Unhealthy = 3,
    Offline = 4,
}
impl NodeHealth {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            NodeHealth::Unknown => "NODE_HEALTH_UNKNOWN",
            NodeHealth::Healthy => "NODE_HEALTH_HEALTHY",
            NodeHealth::Degraded => "NODE_HEALTH_DEGRADED",
            NodeHealth::Unhealthy => "NODE_HEALTH_UNHEALTHY",
            NodeHealth::Offline => "NODE_HEALTH_OFFLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NODE_HEALTH_UNKNOWN" => Some(Self::Unknown),
            "NODE_HEALTH_HEALTHY" => Some(Self::Healthy),
            "NODE_HEALTH_DEGRADED" => Some(Self::Degraded),
            "NODE_HEALTH_UNHEALTHY" => Some(Self::Unhealthy),
            "NODE_HEALTH_OFFLINE" => Some(Self::Offline),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod transport_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Transport service definition
    #[derive(Debug, Clone)]
    pub struct TransportClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TransportClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TransportClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TransportClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            TransportClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Send a message to the server and get a response
        pub async fn send_message(
            &mut self,
            request: impl tonic::IntoRequest<super::TransportMessage>,
        ) -> std::result::Result<
            tonic::Response<super::TransportMessage>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/siddhi.transport.Transport/SendMessage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("siddhi.transport.Transport", "SendMessage"));
            self.inner.unary(req, path, codec).await
        }
        /// Bidirectional streaming for persistent connections
        pub async fn stream_messages(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::TransportMessage>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::TransportMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/siddhi.transport.Transport/StreamMessages",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("siddhi.transport.Transport", "StreamMessages"));
            self.inner.streaming(req, path, codec).await
        }
        /// Server streaming for events/broadcasts
        pub async fn stream_events(
            &mut self,
            request: impl tonic::IntoRequest<super::EventRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::TransportMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/siddhi.transport.Transport/StreamEvents",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("siddhi.transport.Transport", "StreamEvents"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Heartbeat/health check
        pub async fn heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/siddhi.transport.Transport/Heartbeat",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("siddhi.transport.Transport", "Heartbeat"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod transport_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TransportServer.
    #[async_trait]
    pub trait Transport: Send + Sync + 'static {
        /// Send a message to the server and get a response
        async fn send_message(
            &self,
            request: tonic::Request<super::TransportMessage>,
        ) -> std::result::Result<
            tonic::Response<super::TransportMessage>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamMessages method.
        type StreamMessagesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::TransportMessage, tonic::Status>,
            >
            + Send
            + 'static;
        /// Bidirectional streaming for persistent connections
        async fn stream_messages(
            &self,
            request: tonic::Request<tonic::Streaming<super::TransportMessage>>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamMessagesStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamEvents method.
        type StreamEventsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::TransportMessage, tonic::Status>,
            >
            + Send
            + 'static;
        /// Server streaming for events/broadcasts
        async fn stream_events(
            &self,
            request: tonic::Request<super::EventRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamEventsStream>,
            tonic::Status,
        >;
        /// Heartbeat/health check
        async fn heartbeat(
            &self,
            request: tonic::Request<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        >;
    }
    /// Transport service definition
    #[derive(Debug)]
    pub struct TransportServer<T: Transport> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Transport> TransportServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TransportServer<T>
    where
        T: Transport,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/siddhi.transport.Transport/SendMessage" => {
                    #[allow(non_camel_case_types)]
                    struct SendMessageSvc<T: Transport>(pub Arc<T>);
                    impl<
                        T: Transport,
                    > tonic::server::UnaryService<super::TransportMessage>
                    for SendMessageSvc<T> {
                        type Response = super::TransportMessage;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TransportMessage>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Transport>::send_message(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SendMessageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/siddhi.transport.Transport/StreamMessages" => {
                    #[allow(non_camel_case_types)]
                    struct StreamMessagesSvc<T: Transport>(pub Arc<T>);
                    impl<
                        T: Transport,
                    > tonic::server::StreamingService<super::TransportMessage>
                    for StreamMessagesSvc<T> {
                        type Response = super::TransportMessage;
                        type ResponseStream = T::StreamMessagesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::TransportMessage>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Transport>::stream_messages(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamMessagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/siddhi.transport.Transport/StreamEvents" => {
                    #[allow(non_camel_case_types)]
                    struct StreamEventsSvc<T: Transport>(pub Arc<T>);
                    impl<
                        T: Transport,
                    > tonic::server::ServerStreamingService<super::EventRequest>
                    for StreamEventsSvc<T> {
                        type Response = super::TransportMessage;
                        type ResponseStream = T::StreamEventsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EventRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Transport>::stream_events(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamEventsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/siddhi.transport.Transport/Heartbeat" => {
                    #[allow(non_camel_case_types)]
                    struct HeartbeatSvc<T: Transport>(pub Arc<T>);
                    impl<
                        T: Transport,
                    > tonic::server::UnaryService<super::HeartbeatRequest>
                    for HeartbeatSvc<T> {
                        type Response = super::HeartbeatResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HeartbeatRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Transport>::heartbeat(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HeartbeatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Transport> Clone for TransportServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Transport> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Transport> tonic::server::NamedService for TransportServer<T> {
        const NAME: &'static str = "siddhi.transport.Transport";
    }
}
